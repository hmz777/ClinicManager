@using ClinicProject.Client.Helpers
@using ClinicProject.Client.Models.CRUD
@using ClinicProject.Client.Services
@using ClinicProject.Shared.Attributes
@using ClinicProject.Shared.DTOs
@using System
@using ClinicProject.Shared.Models.Error
@using ClinicProject.Shared.Models.Patient
@using System.ComponentModel.DataAnnotations
@using System.Reflection
@typeparam T where T : DTOBase

<MudPaper Class="py-4 px-4 mb-5">
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h6">Filters</MudText>
        </MudItem>
        <MudItem xs="6">
            <MudTextField Class="my-2" Clearable="true" Label="Full Search" T="string" ValueChanged="@(s=> OnSearch(s, "Search"))" Variant="Variant.Outlined" Adornment="Adornment.End"
                          AdornmentIcon="@Icons.Material.Outlined.Edit" AdornmentColor="Color.Primary" IconSize="Size.Medium"></MudTextField>
            <MudDivider Class="my-2" />
            @foreach (var item in PropertyAttributes.Where(i => i.Value?.DataField.HasFlag(DataField.Navigation) == false && i.Value?.ClientSearchable == true))
            {
                switch (item.Value.DataField)
                {
                    case DataField.Text:
                        <MudTextField Class="my-2" Clearable="true" Label="@(item.Value.DisplayName)" T="string" ValueChanged="@(s => OnSearch(s, item.Key.Name))" Variant="Variant.Outlined" Adornment="Adornment.End"
                          AdornmentIcon="@Icons.Material.Outlined.Edit" AdornmentColor="Color.Primary" IconSize="Size.Medium"></MudTextField>
                        break;
                    case DataField.Number:
                        <MudNumericField Class="my-2" T="int?" Clearable="true" Label="@(item.Value.DisplayName)" ValueChanged="@(s => OnSearch(s, item.Key.Name))" Variant="Variant.Outlined" Adornment="Adornment.End"
                             AdornmentIcon="@Icons.Material.Outlined.Edit" AdornmentColor="Color.Primary" IconSize="Size.Medium"></MudNumericField>
                        break;
                    case DataField.Currency:
                        <MudNumericField Class="my-2" T="decimal?" Clearable="true" Label="@(item.Value.DisplayName)" ValueChanged="@(s => OnSearch(s, item.Key.Name))" Variant="Variant.Outlined" Adornment="Adornment.End"
                             AdornmentIcon="@Icons.Material.Outlined.Edit" AdornmentColor="Color.Primary" IconSize="Size.Medium"></MudNumericField>
                        break;
                    case DataField.DateTime:
                        <CustomDateRange DateFormat="dd/MM/yyyy" Class="my-2" Label="@(item.Value.DisplayName)" DateRangeChanged="@(s => OnSearch(s, item.Key.Name))" />
                        break;
                    case DataField.Enum:
                        <MudSelect T="object" ValueChanged="@(s => OnSearch(s?.ToString(), item.Key.Name))"
                       Clearable="true"
                       Label="@(item.Value.DisplayName)"
                       Adornment="Adornment.End"
                       AdornmentIcon="@Icons.Material.Outlined.Edit"
                       AdornmentColor="Color.Primary"
                       Variant="Variant.Outlined"
                       IconSize="Size.Medium">
                            @foreach (var item in Enum.GetValues(item.Key.PropertyType))
                            {
                                <MudSelectItem Value="@item" />
                            }
                        </MudSelect>
                        break;
                    case DataField.TextNavigationExpanded:
                        <MudTextField Class="my-2" Clearable="true" Label="@(item.Value.DisplayName)" T="string" ValueChanged="@(s => OnSearch(s, item.Value.ExpandedFrom + "/" + item.Key.Name))" Variant="Variant.Outlined" Adornment="Adornment.End"
                          AdornmentIcon="@Icons.Material.Outlined.Edit" AdornmentColor="Color.Primary" IconSize="Size.Medium"></MudTextField>
                        break;
                    default:
                        break;
                }
            }
        </MudItem>
        <MudItem xs="12">
            <MudButton StartIcon="@Icons.Material.Outlined.Search" Variant="Variant.Filled" Color="Color.Success" OnClick="DoSearch">Search</MudButton>
        </MudItem>
        <MudItem xs="12">
            <MudDivider Class="my-2" />
        </MudItem>
        <MudItem xs="12">
            <MudButtonGroup OverrideStyles="false" Class="mr-2">
                <MudButton StartIcon="@Icons.Material.Outlined.Add" Variant="Variant.Filled" Color="Color.Primary" OnClick="OnAddPatientBatchPart">Create New</MudButton>
                <MudButton StartIcon="@Icons.Material.Outlined.Delete" Disabled="@(!CanDelete)" Variant="Variant.Filled" Color="Color.Error" OnClick="OnDeleteBatchPart">Delete</MudButton>
            </MudButtonGroup>
            <MudButtonGroup OverrideStyles="false" Class="mr-2">
                <MudButton StartIcon="@Icons.Material.Outlined.SelectAll" Disabled="@(!CanSelectAll)" Variant="Variant.Filled" Color="Color.Secondary" OnClick="SelectAll">Select All</MudButton>
                <MudButton StartIcon="@Icons.Material.Outlined.ClearAll" Disabled="@(!CanClearSelection)" Variant="Variant.Filled" Color="Color.Secondary" OnClick="ClearSelection">Clear Selection</MudButton>
            </MudButtonGroup>
            <MudButtonGroup OverrideStyles="false">
                <MudButton StartIcon="@Icons.Material.Outlined.CheckCircleOutline" Disabled="@(!BatchModel.HasRequests())" Variant="Variant.Filled" Color="Color.Success" OnClick="SaveChanges">Apply</MudButton>
                <MudButton StartIcon="@Icons.Material.Outlined.Cancel" Disabled="@(!BatchModel.HasRequests())" Variant="Variant.Filled" Color="Color.Error" OnClick="ResetChanges">Cancel changes</MudButton>
            </MudButtonGroup>
        </MudItem>
    </MudGrid>
</MudPaper>

<MudTable @ref="@Table"
          ServerData="@(new Func<TableState, Task<TableData<T>>>(ServerReload))"
          CanCancelEdit="true"
          Hover="true"
          Breakpoint="Breakpoint.LgAndDown"
          LoadingProgressColor="Color.Primary"
          T="T"
          MultiSelection="true"
          FixedHeader="true"
          FixedFooter="true"
          RowEditPreview="ItemBackup"
          RowEditCancel="OnItemEditCancel"
          RowEditCommit="OnPutBatchPart"
          IsEditRowSwitchingBlocked="true"
          SelectedItems="SelectedItems"
          SelectedItemsChanged="SelectedItemsChanged">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Patients</MudText>
    </ToolBarContent>
    <HeaderContent>
        @foreach (var property in PropertyAttributes)
        {
            if (property.Value != null)
            {
                if (property.Value.DataField.HasFlag(DataField.Navigation) == false
                && property.Value.DataField != DataField.None)
                {
                    if (!string.IsNullOrEmpty(property.Value.ExpandedFrom))
                    {
                        <MudTh><MudTableSortLabel T="T" SortLabel="@(property.Value.ExpandedFrom + "/" + property.Key.Name)">@property.Value.DisplayName</MudTableSortLabel></MudTh>
                    }
                    else
                    {
                        <MudTh><MudTableSortLabel T="T" SortLabel="@(property.Key.Name)">@property.Value.DisplayName</MudTableSortLabel></MudTh>
                    }
                }
                else if (property.Value.DataField == DataField.NavigationView)
                {
                    <MudTh>@property.Value.DisplayName</MudTh>
                }
            }
        }
    </HeaderContent>
    <RowTemplate>
        @foreach (var property in PropertyAttributes)
        {
            if (property.Value != null)
            {
                if (property.Value.DataField.HasFlag(DataField.Navigation) == false
                && property.Value.DataField != DataField.None)
                {
                    if (property.Key.PropertyType == typeof(DateTime) || property.Key.PropertyType == typeof(DateTime?))
                    {
                        <MudTd DataLabel="@(property.Key.Name)">@context.DateValues[property.Key.Name]?.ToString("dd/MM/yyyy - (hh:mm tt)")</MudTd>
                    }
                    else
                    {
                        <MudTd DataLabel="@(property.Key.Name)">@property.Key.GetValue(context)</MudTd>
                    }
                }
                else if (property.Value.DataField == DataField.NavigationView)
                {
                    <MudTd DataLabel="@(property.Key.Name)">
                        <MudButton OnClick="() => DataView(property.Key.GetValue(context.Id))" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small">View</MudButton>
                    </MudTd>
                }
            }
        }
    </RowTemplate>
    <RowEditingTemplate>
        @foreach (var property in PropertyAttributes)
        {
            if (property.Value != null)
            {
                if (property.Value.Editable)
                {
                    switch (property.Value.DataField)
                    {
                        case DataField.Text:
                            <MudTd>
                                <MudTextField Label="@(property.Value.DisplayName)"
                          @bind-Value="@(context.StringValues[property.Key.Name])"
                          Variant="Variant.Outlined"
                          Required />
                            </MudTd>
                            break;
                        case DataField.MultiLineText:
                            <MudTd>
                                <MudTextField Label="@(property.Value.DisplayName)"
                          Lines="3"
                          @bind-Value="@(context.StringValues[property.Key.Name])"
                          Variant="Variant.Outlined"
                          Required />
                            </MudTd>
                            break;
                        case DataField.Currency:
                            <MudTd>
                                <MudNumericField Label="@(property.Value.DisplayName)"
                             @bind-Value="@(context.DecimalValues[property.Key.Name])"
                             Variant="Variant.Outlined" Required />
                            </MudTd>
                            break;
                        case DataField.Number:
                            <MudTd>
                                <MudNumericField Label="@(property.Value.DisplayName)"
                             @bind-Value="@(context.IntValues[property.Key.Name])"
                             Variant="Variant.Outlined" Required />
                            </MudTd>
                            break;
                        case DataField.PhoneNumber:
                            <MudTd>
                                <MudTextField Label="@(property.Value.DisplayName)"
                          Mask="@(new PatternMask("000000000000000"))"
                          @bind-Value="@(context.StringValues[property.Key.Name])"
                          Variant="Variant.Outlined" Required />
                            </MudTd>
                            break;
                        case DataField.DateTime:
                            <MudTd>
                                <DateWithTime DateLabel="@(property.Value.DisplayName)"
                          TimeLabel="Time"
                          DateFormat="dd/MM/yyyy" TimeFormat="hh:mm tt"
                          @bind-Date="@(context.DateValues[property.Key.Name])"
                          Variant="Variant.Outlined"
                          PickerVariant="PickerVariant.Inline" />
                            </MudTd>
                            break;
                        case DataField.Enum:
                            <MudTd>
                                <MudSelect Variant="Variant.Outlined" @bind-Value="@(context.ObjectValues[property.Key.Name])" Required>
                                    @foreach (var value in Enum.GetValues(property.Key.PropertyType))
                                    {
                    <MudSelectItem Value="@value">@value.ToString()</MudSelectItem>
                                    }
            </MudSelect>
        </MudTd>
                            break;
                        default:
                            break;
                    }
                }
                else if (property.Value.EditPreview)
                {
                    if (property.Key.PropertyType == typeof(DateTime))
                    {
                        <MudTd DataLabel="@(property.Key.Name)">@context.DateValues[property.Key.Name]?.ToString("dd/MM/yyyy")</MudTd>
                    }
                    else
                    {
                        <MudTd DataLabel="@(property.Key.Name)">@property.Key.GetValue(context)</MudTd>
                    }
                }
            }
        }
    </RowEditingTemplate>
    <NoRecordsContent>
        <MudText> No matching records found </MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText> Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>