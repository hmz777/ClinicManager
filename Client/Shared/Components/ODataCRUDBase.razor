@using ClinicProject.Client.Helpers
@using ClinicProject.Client.Models.CRUD
@using ClinicProject.Client.Services
@using ClinicProject.Client.Shared.Patients
@using ClinicProject.Shared.Attributes
@using ClinicProject.Shared.DTOs
@using System
@using ClinicProject.Shared.Models.Error
@using ClinicProject.Shared.Models.Patient
@using System.ComponentModel.DataAnnotations
@using System.Reflection
@typeparam T where T : DTOBase

<MudPaper Class="py-4 px-4 mb-5">
    <MudGrid>
        <MudItem xs="12">
            <MudText Typo="Typo.h6">Filters</MudText>
        </MudItem>
        <MudItem xs="6">
            <MudPaper Elevation="0">
                <MudTextField Label="Search Patients" T="string" ValueChanged="@(s=> OnSearch(s))" Variant="Variant.Outlined" Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Material.Outlined.Search" AdornmentColor="Color.Primary" IconSize="Size.Medium"></MudTextField>
            </MudPaper>
        </MudItem>
        <MudItem xs="6">
            <MudPaper Class="d-flex" Elevation="0">
                <MudDatePicker Class="mr-2" Variant="Variant.Outlined" Label="From Date" @bind-Date="DateFrom" DateFormat="dd/MM/yyyy" />
                <MudDatePicker Variant="Variant.Outlined" Label="To Date" @bind-Date="DateFrom" DateFormat="dd/MM/yyyy" />
            </MudPaper>
            <MudPaper Elevation="0" Class="mt-2">
                <MudButton StartIcon="@Icons.Material.Outlined.DateRange" Variant="Variant.Filled" Color="Color.Primary">Filter by date</MudButton>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" Class="py-2">
            <MudDivider />
        </MudItem>
        <MudItem xs="12">
            <MudPaper Elevation="0">
                <MudButton StartIcon="@Icons.Material.Outlined.Add" Variant="Variant.Filled" Color="Color.Primary" OnClick="OnAddPatient">Add Patient</MudButton>
                <MudButton StartIcon="@Icons.Material.Outlined.Edit" Disabled="@(!CanEdit)" Variant="Variant.Filled" Color="Color.Warning">Edit Patient</MudButton>
                <MudButton StartIcon="@Icons.Material.Outlined.Delete" Disabled="@(!CanDelete)" Variant="Variant.Filled" Color="Color.Error">Delete</MudButton>
                <MudButton StartIcon="@Icons.Material.Outlined.SelectAll" Disabled="@(!CanSelectAll)" Variant="Variant.Filled" Color="Color.Secondary" OnClick="SelectAll">Select All</MudButton>
                <MudButton StartIcon="@Icons.Material.Outlined.ClearAll" Disabled="@(!CanClearSelection)" Variant="Variant.Filled" Color="Color.Secondary" OnClick="ClearSelection">Clear Selection</MudButton>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudPaper>

<MudTable @ref="@Table"
          ServerData="@(new Func<TableState, Task<TableData<T>>>(ServerReload))"
          CanCancelEdit="true"
          Hover="true"
          Breakpoint="Breakpoint.LgAndDown"
          LoadingProgressColor="Color.Primary"
          T="T"
          MultiSelection="true"
          FixedHeader="true"
          FixedFooter="true"
          RowEditPreview="ItemBackup"
          RowEditCancel="OnItemEditCancel"
          RowEditCommit="OnItemEditCommit"
          IsEditRowSwitchingBlocked="true"
          SelectedItems="SelectedItems"
          SelectedItemsChanged="SelectedItemsChanged">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Patients</MudText>
    </ToolBarContent>
    <ColGroup>
        <col />
        <col />
        <col style="width:15%;" />
        <col style="width:20%;" />
        <col style="width:15%;" />
        <col />
        <col />
        <col style="width:15%;" />
        <col />
        <col />
        <col />
        <col />
    </ColGroup>
    <HeaderContent>
        @foreach (var property in PropertyAttributes)
        {
            if (property.Value.Item2 != null)
            {
                if (property.Value.Item2.DataField != DataField.Navigation)
                {
                    <MudTh><MudTableSortLabel T="T" SortLabel="@(property.Key.Name)">@property.Value.Item1.Name</MudTableSortLabel></MudTh>
                }
                else
                {
                    <MudTh>@property.Value.Item1.Name</MudTh>
                }
            }
        }
    </HeaderContent>
    <RowTemplate>
        @foreach (var property in PropertyAttributes)
        {
            if (property.Value.Item2 != null)
            {
                if (property.Value.Item2.DataField != DataField.Navigation)
                {
                    if (property.Key.PropertyType == typeof(DateTime))
                    {
                        <MudTd DataLabel="@(property.Key.Name)">@context.DateValues[property.Key.Name]?.ToString("dd/MM/yyyy")</MudTd>
                    }
                    else
                    {
                        <MudTd DataLabel="@(property.Key.Name)">@property.Key.GetValue(context)</MudTd>
                    }
                }
                else
                {
                    <MudTd DataLabel="@(property.Key.Name)">
                        <MudButton Size="Size.Small" Variant="Variant.Outlined" Color="Color.Primary">View</MudButton>
                    </MudTd>
                }
            }
        }
    </RowTemplate>
    <RowEditingTemplate>
        @foreach (var property in PropertyAttributes)
        {
            if (property.Value.Item2 != null)
            {
                if (property.Value.Item2.Editable)
                {
                    switch (property.Value.Item2.DataField)
                    {
                        case DataField.Text:
                            <MudTd>
                                <MudTextField Label="@(property.Value.Item1.Name)"
                          @bind-Value="@(context.StringValues[property.Key.Name])" Required />
                            </MudTd>
                            break;
                        case DataField.MultiLineText:
                            <MudTd>
                                <MudTextField Label="@(property.Value.Item1.Name)"
                          Lines="3"
                          @bind-Value="@(context.StringValues[property.Key.Name])" Required />
                            </MudTd>
                            break;
                        case DataField.Currency:
                        case DataField.Number:
                            <MudTd>
                                <MudNumericField Label="@(property.Value.Item1.Name)"
                             @bind-Value="@(context.IntValues[property.Key.Name])" Required />
                            </MudTd>
                            break;
                        case DataField.PhoneNumber:
                            <MudTd>
                                <MudTextField Label="@(property.Value.Item1.Name)"
                          Mask="@(new PatternMask("000000000000000"))"
                          @bind-Value="@(context.StringValues[property.Key.Name])" Required />
                            </MudTd>
                            break;
                        case DataField.DateTime:
                            <MudTd>
                                <MudDatePicker Label="@(property.Value.Item1.Name)"
                           DateFormat="dd/MM/yyyy"
                           @bind-Date="@(context.DateValues[property.Key.Name])" Required />
                            </MudTd>
                            break;
                        case DataField.Enum:
                            <MudTd>
                                <MudSelect @bind-Value="@(context.ObjectValues[property.Key.Name])" Required>
                                    @foreach (var value in Enum.GetValues(property.Key.PropertyType))
                                    {
                    <MudSelectItem Value="@value" />
                                    }
            </MudSelect>
        </MudTd>
                            break;
                        default:
                            break;
                    }
                }
                else if (property.Value.Item2.EditPreview)
                {
                    if (property.Key.PropertyType == typeof(DateTime))
                    {
                        <MudTd DataLabel="@(property.Key.Name)">@context.DateValues[property.Key.Name]?.ToString("dd/MM/yyyy")</MudTd>
                    }
                    else
                    {
                        <MudTd DataLabel="@(property.Key.Name)">@property.Key.GetValue(context)</MudTd>
                    }
                }
            }
        }
    </RowEditingTemplate>
    <NoRecordsContent>
        <MudText> No matching records found </MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText> Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    #region Services

    [Inject] ODataCRUDHandler<T> ODataCRUDHandler { get; set; }

    #endregion

    #region Members

    Dictionary<PropertyInfo, (DisplayAttribute, DataFieldAttribute)> PropertyAttributes = new();

    MudTable<T>? Table;
    IEnumerable<T> Items = new HashSet<T>();
    HashSet<T> SelectedItems = new();

    string? searchString;
    T? EditBackupItem;

    bool CanDelete = false;
    bool CanEdit = false;
    bool CanSelectAll = true;
    bool CanClearSelection = false;

    DateTime? DateFrom { get; set; }
    DateTime? DateTo { get; set; }

    #endregion

    #region Life Cycle

    protected override void OnInitialized()
    {
        foreach (var property in typeof(T).GetProperties())
        {
            var dataField = property.GetCustomAttributes(typeof(DataFieldAttribute), true).Cast<DataFieldAttribute>().FirstOrDefault();
            var disp = property.GetCustomAttributes(typeof(DisplayAttribute), true).Cast<DisplayAttribute>().FirstOrDefault();

            PropertyAttributes[property] = (disp, dataField);
        }

        PropertyAttributes = PropertyAttributes
          .OrderByDescending(p => p.Key.Name.ToLower().StartsWith('i'))
          .ThenByDescending(p => p.Value.Item2?.DataField != DataField.Navigation)
          .ToDictionary(p => p.Key, p => p.Value);
    }

    #endregion

    #region Selection Events

    void SelectedItemsChanged(HashSet<T> selectedItems)
    {
        CanDelete = SelectedItems?.Count > 0;
        CanEdit = SelectedItems?.Count == 1;
        CanSelectAll = SelectedItems?.Count == 0;
        CanClearSelection = SelectedItems?.Count > 0;
    }

    void SelectAll()
    {
        SelectedItems = Items.ToHashSet<T>();
    }

    void ClearSelection()
    {
        SelectedItems.Clear();
    }

    #endregion

    #region A,D

    async void OnAddPatient()
    {
        var AddDialog = DialogService.Show<AddPatientDialog>("Add Patient");
        var dialogResult = await AddDialog.Result;

        if (!dialogResult.Cancelled)
        {
            var Data = dialogResult.Data;

            var res = await ODataCRUDHandler.Post(Data as T);

            if (res.Key == System.Net.HttpStatusCode.Created)
            {
                Snackbar.Add("Patient added successfully.", Severity.Success);
                await Table.ReloadServerData();
            }
            else
            {
                if (res.Value != null)
                {
                    Snackbar.Add(res.Value.ToString(), Severity.Error);
                }
                else
                {
                    Snackbar.Add("Patient could not be added.", Severity.Error);
                }
            }
        }
    }

    #endregion

    #region Inline Editing

    void ItemBackup(object item)
    {
        EditBackupItem = Mapper.Map<T>(item);
    }

    void OnItemEditCancel(object item)
    {
        Mapper.Map(EditBackupItem, item);
    }

    async void OnItemEditCommit(object item)
    {
        var res = await ODataCRUDHandler.Put(item as T);

        if (res.Key == System.Net.HttpStatusCode.NoContent)
        {
            Snackbar.Add("Item updated successfully.", Severity.Success);
            return;
        }
        else if (res.Key == System.Net.HttpStatusCode.BadRequest)
        {
            if (res.Value != null)
            {
                Snackbar.Add(res.Value.ToString(), Severity.Error);

                await InvokeAsync(() =>
                {
                    ModelRestoreHelper.Restore<T>(res.Value, EditBackupItem, item as T);
                    StateHasChanged();
                });
            }
            else
            {
                Snackbar.Add("Bad request.", Severity.Error);
            }

            return;
        }
        else
        {
            Snackbar.Add("Internal server error.", Severity.Error);
        }
    }

    #endregion

    #region Serverside Processing

    async Task<TableData<T>> ServerReload(TableState tableState)
    {
        ClearSelection();

        var crudModel = Mapper.Map<CRUDModel>(tableState);
        crudModel.SearchString = searchString;

        var res = await ODataCRUDHandler.Get(crudModel);
        Items = res.Value;

        return new TableData<T>() { TotalItems = res.Key, Items = res.Value };
    }

    async void OnSearch(string text)
    {
        searchString = text;
        Table.NavigateTo(Page.First);
        await Table.ReloadServerData();
    }

    #endregion

    #region Value Changed Handlers

    void OnEditValueChangedHandler(int Id, string name, object value)
    {
        var tableItem = Table.Items.Where(i => i.Id == Id).First();

        tableItem.GetType().GetProperty(name).SetValue(tableItem, value);
    }

    #endregion
        }
